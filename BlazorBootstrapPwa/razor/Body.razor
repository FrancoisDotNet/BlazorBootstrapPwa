@using System.Globalization
@inject Blazored.LocalStorage.ISyncLocalStorageService service

<table>
    <thead>
        <tr>
            <th scope="col" class="@(IsEdit ? IsTransfer ? "" : "d-none" : "")">
                <div role="group" aria-label="Menu" class="@(IsQuickEdit ? "d-none" : IsTransfer ? "d-none" : "")">
                    <button type="button" @onclick="QuickEdit" class="fa-edit" title="Edit"></button>
                    <button type="button" @onclick="Edit" class="fa-cog" title="Settings"></button>
                </div>
                <div role="group" aria-label="Menu" class="@(IsQuickEdit ? "" : IsTransfer ? "" : "d-none")">
                    <button type="button" @onclick="Cancel" class="fa-times" title="Cancel"></button>
                    <button type="button" @onclick="Save" class="fa-check" title="Save"></button>
                </div>
            </th>
            <th scope="col" class="@(IsEdit ? "d-none" : "")" style="width:33.33%">
                @CultureInfo.CurrentCulture.TextInfo.ToTitleCase(DateTime.Now.AddMonths(-1).ToString("MMM"))
            </th>
            <th scope="col" class="@(IsEdit ? "d-none" : "")" style="width:33.33%">
                @CultureInfo.CurrentCulture.TextInfo.ToTitleCase(DateTime.Now.ToString("MMM"))
            </th>
        </tr>
    </thead>
        <tbody>
            <tr class="btn-primary active" style="font-weight: bold">
                <td class="text-left">Total</td>
                <td>sfs</td>
                <td>sbksjf</td>
            </tr>
        </tbody>
@*     <CascadingValue Value="this">
        <TBody/>
    </CascadingValue>*@
    <tbody class="@(IsTransfer ? "" : "d-none")">
        <textarea class="form-control" @bind="transfer"/>
    </tbody>
</table>

@code {
    public Transactions Budget { get; set; }
    public bool IsEdit { get; set; } = false;
    public bool IsQuickEdit { get; set; } = false;
    public bool IsTransfer { get; set; } = false;
    string transfer;

    protected override void OnInitialized() => Budget = service.GetItem<Transactions>("budget") is null ? new Transactions() : service.GetItem<Transactions>("budget");
    
    void Cancel()
    {
        IsEdit = false;
        IsQuickEdit = false;
        IsTransfer = false;
        OnInitialized();
    } 
    
    void Save()
    {
        Budget = IsTransfer ? Budget.Import(transfer) : Budget;
        service.SetItem("budget", Budget);
        Cancel();
    }
    
    void Add() => Budget.List.Add(new Transaction());

    void Transfer()
    {
        IsTransfer = true;
        transfer = Budget.Export();
    }

    void Edit() => IsEdit = true;

    void QuickEdit() => IsQuickEdit = true;
}